Hey $NAME,

Unfortunately, we're not going to move forward with your application right now. Interviewing is a messy process, and we know that we'll inevitably make mistakes as we iron out our process. We also believe in giving the people we interview honest feedback.

  This was a tough decision.
  We were impressed by your knowledge of $TOPIC.
  Your insights on the memcache and used car problems demonstrated a very broad knowledge of systems.
  You showed good knowledge of web systems and scaling applications, which are both highly valuable skills.
  We got the impression that you're a generally strong developer.
  You write really nice $LANGUAGE code.
  You did a great Connect-4, with good logic and good process.
    You had good abstracted code with a simple and efficient win check.
  We were impressed by your raw ability to get things done with code and make consistent progress toward solutions. Your methods were well-factored and your variables clearly named.
  We can tell you're smart, curious, and driven.

  However, you lacked depth in your knowledge of computer science.
   You didn't display the skills we need to see in working with complicated systems like in the Memcached problem.
  However, we didn't see the coding ability that we need to see to work with people.
    We didn't make it as far through the connect 4 or stock runs problems as we wanted to.
     Specifically, you struggled with the win check in the connect four implementation and did not come up with a clean way to check all line directions.
    The maze problem in particular is where we got stuck, especially on the details of breadth first and depth first search. While this isn't specifically a problem, when picking problems that are more algorithmic focused we do expect to see a strong, deep understanding of these details.
    Your code had a lot of duplication and not enough abstraction.
  The main thing that held us back was just the stumbling blocks while getting code written. This is one of the trickiest things about programming interviews, since there's a lot of factors affecting your performance, some of which are under your control and some of which come down to it being a fundamentally weird scenario.
  While speed isn't the only area we look at, it does raise the bar on other areas such as design and problem solving. We didn't see enough strength in these areas to use them as the basis for moving forward unfortunately.
  But we needed to see some kind of show of strength that we didn't see - we didn't see any terrible mistakes, but we also didn't see a single standout performance. We've found that having those areas of strength gels better with the structure of our process than being generally solid at a range of things. It also may well be that the structure of our interview just didn't uncover your strengths - we're always trying to get better at that.
  You're clearly experienced and you talk well about technology, but ultimately we need to see more sophisticated coding ability. This might be an interview stress issue or a process issue.
  On the memcached question, you didn't get as far through the problem as we wanted.
  It also felt that you weren't completely familiar or comfortable with $LANGUAGE.
  As a senior engineer we needed to see exceptional performance in one area of the interview (e.g coding, process or knowledge). While we saw strong performance across each of these areas, we couldn't clearly identify one area we could use as the peg to hang our recommendation to companies on.

Here's our advice.
  Often, simply getting more practice with interview-style problems can help - while we do our best, it's always going to be tough to figure out someone's strengths with a few short hours, and practicing interview problems helps you reduce that element of chance. We recommend InterviewCake.com and the book Cracking the Coding Interview as good resources on that front.
  You should practice your coding more. You can practice this by doing coding problems such as the ones you can find on Cracking the Coding Interview or InterviewCake.com, or by implementing the famous algorithms--breadth first search, binary heaps and so on.
  We recommend that you work on deepening your knowledge of CS.
  We recommend you practice talking more about software design. Web systems particularly are important. Two of our favorite resources for this are <a href="https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/">this blog post</a> and <a href="https://gist.github.com/vasanthk/485d1c25737e8e72759f">this gist</a>. Reading and understanding blog posts about how real-world systems are designed can help a lot when answering systems design questions as well. A helpful resourse for this is the blog <a href="http://highscalability.com/">High Scalability</a>.
  It also probably makes sense for you to put some effort into practicing writing simpler and shorter code: a lot of the time you wrote code that was more complex than necessary.
    One way of improving at this is to ask a more experienced programmer friend to review your code for you and suggest ways you can make it shorter.
  We think that you'd benefit a lot from a little more experience on larger projects, and studying how the Internet works at a lower level. A good way to do this is to try writing a web server from scratch, using just a raw socket. Try to build a routing system into your server, and create some soft of dynamic website (using cookies). We'd be happy to give you feedback on this, after you've done it.

  This was a tough call and we know this isn't a perfect process; we'd love to hear your honest feedback on how we might have improved it. We're also happy to hear any other questions you have.

  We think you're really high potential, and we'd love to talk to you if you're still job searching in two months (we of course hope for your sake that you're happily employed by then), or next time you want a job.

And again, we know this isn't a perfect process and we'd love to hear your honest feedback on how we might have improved it. We're also happy to hear any other questions you have.

Best,
Triplebyte Team
