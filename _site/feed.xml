<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title></title>
    <description>Website of Buck Shlegeris.
</description>
    <link>http://bshlgrs.github.io</link>
    <atom:link href="http://bshlgrs.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Studying for startup interviews with &#39;Cracking the Coding Interview&#39;</title>
        
        
          <description>&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X&quot;&gt;Cracking the Coding Interview&lt;/a&gt; is by far the most popular interview prep book for software engineers. But it was written for a few years ago, and software engineering interviews seem to have changed in the meantime, at least in the Silicon Valley engineering culture which I’m most involved in.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 16 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/06/16/ctci.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/06/16/ctci.html</guid>
      </item>
    
      <item>
        <title>&#39;Who is the kth richest person with age between x and y&#39;</title>
        
        
          <description>&lt;p&gt;Suppose I want to maintain a set of people where each has an age and a wealth. I want to be able to quickly insert people, delete people, and answer queries of the form “find the $latex k$th richest person whose age is between $latex x$ and $latex y$”.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 16 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/06/16/kth-richest.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/06/16/kth-richest.html</guid>
      </item>
    
      <item>
        <title>Generalized multi-quickselect</title>
        
        
          <description>&lt;p&gt;I’ve been thinking a lot recently about how you find the $latex k$th smallest element in the disjoint union of several data structures.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 16 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/06/16/generalized-multi-quickselect.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/06/16/generalized-multi-quickselect.html</guid>
      </item>
    
      <item>
        <title>Quickselect on multiple sorted arrays</title>
        
        
          <description>&lt;p&gt;&lt;strong&gt;Edit: Thanks heaps to &lt;a href=&quot;http://stackoverflow.com/users/1009831/evgeny-kluev&quot;&gt;Evgeny Kluev&lt;/a&gt;, the author of that original StackOverflow answer, for noticing that I’d made a mistake in the total time complexity calculation.&lt;/strong&gt;&lt;/p&gt;

</description>
        
        <pubDate>Wed, 15 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/06/15/multi-sorted-array-quickselect.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/06/15/multi-sorted-array-quickselect.html</guid>
      </item>
    
      <item>
        <title>Quickselect on an unordered array and an order statistic tree</title>
        
        
          <description>&lt;p&gt;&lt;strong&gt;I did this work myself, so there are probably mistakes. I think the conclusion is right though.&lt;/strong&gt;&lt;/p&gt;

</description>
        
        <pubDate>Sun, 12 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/06/12/quickselect-lemma.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/06/12/quickselect-lemma.html</guid>
      </item>
    
      <item>
        <title>Not thinking of things I can&#39;t say</title>
        
        
          <description>&lt;p&gt;I noticed recently that I usually don’t think of thoughts which I’m not going to be able to say for political correctness reasons. Occasionally when I talk to people who don’t care about offending progressives, they say really insightful things which I would never have thought of on my own, because my brain just blocks those thoughts out before I can think them.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 02 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/06/02/say.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/06/02/say.html</guid>
      </item>
    
      <item>
        <title>Optimize dating for non-interference with platonic relationships</title>
        
        
          <description>&lt;p&gt;[content warning—I make a lot of claims that certain ways of hitting on people are much better than other ways. If you have a tendency to freak out about whether you’re a terrible person for being sexually attracted to people, maybe don’t read this.]&lt;/p&gt;

</description>
        
        <pubDate>Sun, 29 May 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/05/29/explicit.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/05/29/explicit.html</guid>
      </item>
    
      <item>
        <title>Flinching away from hard things</title>
        
        
          <description>&lt;p&gt;I have a strong reflex to not do complicated things when I’m writing code—I flinch away and try really hard to avoid them. I think this reflex often serves me well, because complicated code is a pain to maintain and in real life you usually don’t need it. When I watch other people code, I often see them start down a complicated path to solve a problem, and then persevere through it. When faced with the same problems as them, I’m much more inclined to start down a complicated path, then realize it’s going to be complicated and reflexively give up. Most problems that I run across actually have relatively simple solutions, so this serves me well: I end up flailing for longer at the start, but then I end up with simpler code than I would have had otherwise.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 29 May 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/05/29/flinching.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/05/29/flinching.html</guid>
      </item>
    
      <item>
        <title>My main effective altruism mistakes so far</title>
        
        
          <description>&lt;p&gt;Here are the biggest things I got wrong in my attempts at effective altruism over the last ~3 years.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 24 May 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/05/24/mistakes.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/05/24/mistakes.html</guid>
      </item>
    
      <item>
        <title>The dumbest algorithm problem in the entire world</title>
        
        
          <description>&lt;p&gt;Want to know the dumbest algorithm problem in the entire world? Here it is:&lt;/p&gt;

</description>
        
        <pubDate>Fri, 22 Apr 2016 00:00:00 -0700</pubDate>
        <link>http://bshlgrs.github.io/2016/04/22/dumbest-algorithm-problem.html</link>
        <guid isPermaLink="true">http://bshlgrs.github.io/2016/04/22/dumbest-algorithm-problem.html</guid>
      </item>
    
  </channel>
</rss>

